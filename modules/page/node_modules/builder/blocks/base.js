'use strict';

var informal = require('informal'),
	styles = require('../styles');

var Base = function(style, data){
	if (!(this instanceof Base)) return new Base();

	this.style = style;
	this.data = data;
	this.buildBase();
	this.build();
};

Base.prototype.buildBase = function(){
	this.wrapper = document.createElement('div');
	this.wrapper.setAttribute('draggable', true);
	this.wrapper.setAttribute('class', 'block block-type-' + this.meta.type);
	this.wrapper.innerHTML = '<header class="block--header">' +
		'<span class="block--title">' +
			this.meta.name +
			'<span class="title-fragment">&mdash;' +
				'<span class="fragment-content"></span>' +
			'</span>' +
		'</span>' +
		'<div class="block--options">' +
			'<button class="action-minimize" href="#">Minimise block</button>' +
			'<button class="action-delete" href="#">Remove block</button>' +
		'</div>' +
	'</header>' +
	'<div class="block--content"></div>';

	this.content = this.wrapper.querySelector('.block--content');
	this.blockOptions = this.wrapper.querySelector('.block--options');
	this.minimizeButton = this.wrapper.querySelector('.action-minimize');
	this.deleteButton = this.wrapper.querySelector('.action-delete');
	this.fragment = this.wrapper.querySelector('.fragment-content');

	if (styles.length){
		this.styleSelect = document.createElement('select');
		this.styleSelect.classList.add('block--style');

		var i, html = '';
		for (i = 0; i < styles.length; i++){
			html += '<option value="' + styles[i].value + '"';
			html += this.style == styles[i].value ? ' selected' : '';
			html += '>' + styles[i].label + '</option>';
		}
		this.styleSelect.innerHTML += html;

		this.blockOptions.insertBefore(this.styleSelect, this.blockOptions.firstChild);
	}


	var self = this;
	this.minimizeButton.addEventListener('click', function(e){
		e.preventDefault();
		self.toggle();
	});

	this.deleteButton.addEventListener('click', function(e){
		e.preventDefault();
		self.delete();
	});
};

Base.prototype.build = function(){
	if (!this.formSpec) return;

	this.form = new informal.Form(this.formSpec, this.data);
	this.content.appendChild(this.form.wrap);
};

Base.prototype.minimize = function(){
	this.fragment.textContent = this.getTitle();
	this.wrapper.classList.add('is-minimized');
	this.collapsed = true;
};

Base.prototype.maximize = function(){
	this.wrapper.classList.remove('is-minimized');
	this.collapsed = false;
};

Base.prototype.toggle = function(){
	if (this.collapsed) this.maximize();
	else this.minimize();
};

Base.prototype.delete = function(){
	var message = 'Are you sure you want to remove this block? All its content will be lost.';
	if (!confirm(message)) return;

	this.wrapper.parentNode.removeChild(this.wrapper);
};

Base.prototype.getValues = function(){
	var block = {
		type: this.meta.type
	};

	if (this.styleSelect){
		block.style = this.styleSelect.value;
	}

	if (this.form){
		block.properties = this.form.getValues();
	}

	return block;
};

module.exports = Base;
